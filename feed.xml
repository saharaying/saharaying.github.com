<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://saharaying.github.com/blog</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2014-03-15T06:51:00Z</updated>
  <author>
    <name>Fu Ying</name>
  </author>
  <entry>
    <title>MH370</title>
    <link rel="alternate" href="/2014/03/15/mh370.html"/>
    <id>/2014/03/15/mh370.html</id>
    <published>2014-03-15T06:51:00Z</published>
    <updated>2014-03-15T06:51:00Z</updated>
    <author>
      <name>Fu Ying</name>
    </author>
    <summary type="html">&lt;p&gt;马航MH370失联，8天了，不知道多少反反复复，坠海 -&amp;gt; 空中解体 -&amp;gt; 劫机，越南发消息 -&amp;gt; 中方转发 -&amp;gt; 马方否认，真相到底是什么？现在看来，
劫机的可能性最大，而且很有可能是飞行员啊，但又让人不解的是，劫机的话，却没有人跳出来说要跟政府谈判，想要什么你说呀，你不说我们怎么知道呀。&lt;/p&gt;

&lt;p&gt;还是等等继续看马航新闻发布会直播吧&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;马航MH370失联，8天了，不知道多少反反复复，坠海 -&amp;gt; 空中解体 -&amp;gt; 劫机，越南发消息 -&amp;gt; 中方转发 -&amp;gt; 马方否认，真相到底是什么？现在看来，
劫机的可能性最大，而且很有可能是飞行员啊，但又让人不解的是，劫机的话，却没有人跳出来说要跟政府谈判，想要什么你说呀，你不说我们怎么知道呀。&lt;/p&gt;

&lt;p&gt;还是等等继续看马航新闻发布会直播吧&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Cross Domain iFrame Auto Height</title>
    <link rel="alternate" href="/2013/04/30/cross-domain-iframe-auto-height.html"/>
    <id>/2013/04/30/cross-domain-iframe-auto-height.html</id>
    <published>2013-04-30T08:00:00Z</published>
    <updated>2013-04-30T08:00:00Z</updated>
    <author>
      <name>Fu Ying</name>
    </author>
    <summary type="html">&lt;p&gt;We have a feature, that is providing a js script which generates an iframe containing a form, so that other people can embed this form on their website by just including this js.
What we did before, is calculating the form height, and writing the height...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;We have a feature, that is providing a js script which generates an iframe containing a form, so that other people can embed this form on their website by just including this js.
What we did before, is calculating the form height, and writing the height into the script, then the host website could know how much the iframe's height should be.
However sometimes people will change the form, so the height will be changed! Then they need to update the script on their website, otherwise there will be an ugly scroll bar when the height increases.
This is really rebarbative 'cause we can't force our user to update the script every time they change the form.&lt;/p&gt;

&lt;p&gt;A few days ago, we assigned this issue with a high priority, which was making the iframe set it's height automatically by it's own content height.&lt;/p&gt;

&lt;p&gt;So the hardest problem is how can we deal with the cross domain security issue, since we can't get the iframe content height from the parent page if they are in different domain.
Well luckily, after a few digging, we came up with the &lt;strong&gt;postMessage&lt;/strong&gt; way! Can't visit the content window of a different domain? fine, then we can send a message from the iframe!&lt;/p&gt;

&lt;p&gt;Here is the code:&lt;/p&gt;

&lt;p&gt;in the iframe, add the following script(in coffee)&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;:::javascript
$ -&amp;gt;
  postSize = -&amp;gt;
    target = if parent.postMessage
      parent
    else
      if parent.document.postMessage then parent.document else undefined
    target.postMessage $(document).height(), "*" if target
  if window.addEventListener
    window.addEventListener "load", postSize, false
  else
    window.attachEvent "onload", postSize, false if window.attachEvent
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Let me explain the above code. There is a &lt;em&gt;postSize&lt;/em&gt; function, which finds the parent, then posts the height as a message to the parent.
This postSize function will be bound as soon as the window loaded. &lt;em&gt;window.attachEvent&lt;/em&gt; is used to deal with the compatibility of IE.&lt;/p&gt;

&lt;p&gt;Then in the parent site, add the following script before the iframe&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;:::javascript
receiveSize = function (e) {
  if ('&amp;lt; your iframe domain &amp;gt;'.indexOf(e.origin) === 0) {
  // to make sure it's the message posted from the right iframe
    document.getElementById(iframeId).style.height = e.data + 'px';
  }
};
if (window.addEventListener) {
  window.addEventListener('message', receiveSize, false);
} else if (window.attachEvent) {
  window.attachEvent('onmessage', receiveSize, false);
}
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Here we use the pure javascript, similar, the parent site listens to the message event, then sets the iframe height.&lt;/p&gt;

&lt;p&gt;Voila, we achieved it ~ Then we no longer suffered the pain of iframe height ~&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>MongoMapper迁移到Mongoid</title>
    <link rel="alternate" href="/2013/04/30/migrate-from-mongomapper-to-mongoid.html"/>
    <id>/2013/04/30/migrate-from-mongomapper-to-mongoid.html</id>
    <published>2013-04-30T07:47:00Z</published>
    <updated>2013-04-30T07:47:00Z</updated>
    <author>
      <name>Fu Ying</name>
    </author>
    <summary type="html">&lt;p&gt;这篇博客断断续续写了将近一个月，终于算是总结的差不多了，将就着看吧。&lt;/p&gt;

&lt;hr&gt;&lt;p&gt;原本我们使用了MongoMapper作为MongoDB的ORM，但是随着业务逻辑越来越复杂，它已经不能满足我们的需求了:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;数据量越来越大，数据库查询性能问题越来越显著，据说Mongoid的性能可以提高4倍&lt;/li&gt;
  &lt;li&gt;MongoMapper的gem最后一次更新是在2012年9月，维护的频率不如Mongoid（最后更新2013年4月17日），并且对动态域的存取操作支持也不好&lt;/li&gt;
  &lt;li&gt;围绕Mongoid的周边gem更加丰富&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;于是我花...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;这篇博客断断续续写了将近一个月，终于算是总结的差不多了，将就着看吧。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;原本我们使用了MongoMapper作为MongoDB的ORM，但是随着业务逻辑越来越复杂，它已经不能满足我们的需求了:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;数据量越来越大，数据库查询性能问题越来越显著，据说Mongoid的性能可以提高4倍&lt;/li&gt;
  &lt;li&gt;MongoMapper的gem最后一次更新是在2012年9月，维护的频率不如Mongoid（最后更新2013年4月17日），并且对动态域的存取操作支持也不好&lt;/li&gt;
  &lt;li&gt;围绕Mongoid的周边gem更加丰富&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;于是我花了大概4天的时间将项目从MongoMapper迁移到了Mongoid。能看得到的明显的变化有:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;数据库查询确实快了很多，包括聚合查询的速度也有很大提升。&lt;/li&gt;
&lt;li&gt;调用&lt;em&gt;update_attributes&lt;/em&gt;方法，不再是使用MongoDB的&lt;em&gt;$update&lt;/em&gt;更新所有域，而是使用&lt;em&gt;$set&lt;/em&gt;仅更新有变化的域。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在迁移过程中，需要注意以下几个方面：&lt;/p&gt;

&lt;h4 id="section"&gt;1. 数据库连接配置&lt;/h4&gt;
&lt;p&gt;在mongid.yml中，我们配置了两个option： &lt;em&gt;include_type_for_serialization: true&lt;/em&gt; 和&lt;em&gt;raise_not_found_error: false&lt;/em&gt;。&lt;/p&gt;

&lt;p&gt;第一个是指在对model进行序列化时（比如to_json），默认包含Single Collection Inheritance的_type字段。&lt;/p&gt;

&lt;p&gt;第二个顾名思义，当使用find方法查询model时，如果找不到，返回nil，而不是抛出异常。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;:::yaml
development:
  sessions:
    default:
      hosts:
        - 127.0.0.1:27017
      database: goldendata_development
      username: root
      password:
  options:
    include_type_for_serialization: true
    raise_not_found_error: false
&lt;/code&gt;
&lt;/pre&gt;

&lt;h4 id="modelrelation"&gt;2. Model中的字段和relation&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;field和fields是关键字，不能作为属性或relation的名字，如果数据库里对应的key为&lt;em&gt;fields&lt;/em&gt;，那么你需要&lt;strong&gt;store_as&lt;/strong&gt;这个option。譬如
&lt;em&gt;embeds_many :f_fields, store_as: 'fields', class_name: 'Field'&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;如果要给model加上时间戳，只需要&lt;strong&gt;include Mongoid::Timestamps&lt;/strong&gt;这个module就可以了&lt;/li&gt;
  &lt;li&gt;没有userstamps的module，如果真的需要，只好自己实现&lt;/li&gt;
  &lt;li&gt;Mongoid&lt;strong&gt;支持动态域的存取&lt;/strong&gt;，也就是说，不用&lt;em&gt;field&lt;/em&gt;关键字声明的属性也可以被访问和保存，只需要调用&lt;em&gt;read_attribute&lt;/em&gt;或&lt;em&gt;write_attribute&lt;/em&gt;方法即可，譬如 &lt;em&gt;model.read_attribute(:dynamic_field)&lt;/em&gt; 或者 &lt;em&gt;model[:dynamic_field]&lt;/em&gt;，如果动态域不存在，则会返回nil。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id="section-1"&gt;3. 查询和聚合&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;复杂的查询由&lt;strong&gt;&lt;a href="http://mongoid.org/en/origin/docs/selection.html"&gt;origin&lt;/a&gt;&lt;/strong&gt;提供，包括and/or/elem_match/gt等一系列方法。譬如
&lt;em&gt;Entry.or({field1: 'a'}, {field2: 'b'})&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;sort需要替换成对应的&lt;strong&gt;asc&lt;/strong&gt;/&lt;strong&gt;desc&lt;/strong&gt;或&lt;strong&gt;order_by&lt;/strong&gt;，比如&lt;em&gt;desc(:created_at)&lt;/em&gt; 或者 &lt;em&gt;order_by(:created_at.desc)&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;另外，Mongoid不再支持group方法，应该改用aggregate或者map_reduce实现&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id="model"&gt;4. 其他model相关的变更&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;异常。&lt;em&gt;MongoMapper::DocumentNotFound&lt;/em&gt; 异常要换成 &lt;em&gt;Mongoid::Errors::DocumentNotFound&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;to_mongo&lt;/em&gt;和&lt;em&gt;from_mongo&lt;/em&gt;方法要分别换成&lt;strong&gt;mongoize&lt;/strong&gt;和&lt;strong&gt;demongoize&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;对model进行序列化时，默认的与id对于的key不再是&lt;em&gt;id&lt;/em&gt;，而是&lt;em&gt;_id&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;对于callback，譬如after_create，如果这个model上含有has_many的relation，并且该relation设置为autosave: true，那么这个after_create的callback将会发生在该model创建以后，但是在这个has_many的关联保存之前。参见：
&amp;gt; Note that to be efficient, Mongoid only fires the callback of the document that the persistence action was executed on. This is that Mongoid aims to support large hierarchies and to handle optimized atomic updates callbacks can't be firing all over the document hierarchy.&lt;/li&gt;
  &lt;li&gt;Mongoid对model有着更严格的检查，比如我们不能直接创建一个embedded document对象&lt;/li&gt;
  &lt;li&gt;创建&lt;strong&gt;索引&lt;/strong&gt;的方式改变。在Mongid中，调用&lt;em&gt;Form.index(creator_id: 1, created_at: -1)&lt;/em&gt;不会真正创建索引，必须运行&lt;em&gt;rake db:mongoid:create_indexes&lt;/em&gt;，而要移除索引，运行&lt;em&gt;rake db:mongoid:remove_indexes&lt;/em&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id="ormgem"&gt;5. ORM周边的gem替换&lt;/h4&gt;
&lt;p&gt;如果使用了一些需要依赖MongoDB的gem，比如omniauth-identity, will_paginate, mm-carrierwave, sidekiq等，
- &lt;em&gt;include OmniAuth::Identity::Models::MongoMapper&lt;/em&gt; 变为 &lt;em&gt;include OmniAuth::Identity::Models::Mongoid&lt;/em&gt;
- will_paginate gem换成will_paginate_mongoid
- mm-carrierwave gem换成carrierwave-mongoid，但是如果只是声明成&lt;em&gt;mount_uploader &amp;lt;mounted_as&amp;gt;, Uploader&lt;/em&gt;，文件名将会存储到&amp;lt;mounted_as&amp;gt;字段，而不是像mm-carrierwave那样存储到&amp;lt;mounted_as&amp;gt;_filename。为了不进行数据迁移，我们可以加上&lt;strong&gt;mount_on&lt;/strong&gt;的声明：
&lt;em&gt;mount_uploader &amp;lt;mounted_as&amp;gt;, Uploader, mount_on: &amp;lt;mounted_as&amp;gt;_filename&lt;/em&gt;。
- 如果使用了sidekiq，必须确保每个sidekiq的worker运行完后释放数据库的连接，那么可能需要使用&lt;strong&gt;&lt;a href="http://mongoid.org/en/mongoid/docs/tips.html#sidekiq"&gt;kiqstand&lt;/a&gt;&lt;/strong&gt;。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>MongoDB中计算聚合值的三种方法（三）</title>
    <link rel="alternate" href="/2013/02/09/3-ways-to-calculate-aggregation-in-mongodb-3.html"/>
    <id>/2013/02/09/3-ways-to-calculate-aggregation-in-mongodb-3.html</id>
    <published>2013-02-09T12:35:00Z</published>
    <updated>2013-02-09T12:35:00Z</updated>
    <author>
      <name>Fu Ying</name>
    </author>
    <summary type="html">&lt;p&gt;其实，MongoDB已经提供了求最大最小平均值和和值的方法，所以连reduce都可以免了，我们可以直接使用aggregation框架，这就是第三种方法。&lt;/p&gt;

&lt;h4&gt;3. 使用aggregation框架&lt;/h4&gt;

&lt;p&gt;MongoDB文档中&lt;a href="http://docs.mongodb.org/manual/reference/aggregation/"&gt;aggregation这一节&lt;/a&gt;对这个框架的使用有详细的说明。结合我们的例子，可以这样使用：&lt;/p&gt;

&lt;pre&gt;
&lt;code&gt;:::ruby
def number_statistics field, condition
  self.collection.aggregate([
    {:$match =&amp;gt;...&lt;/code&gt;&lt;/pre&gt;</summary>
    <content type="html">&lt;p&gt;其实，MongoDB已经提供了求最大最小平均值和和值的方法，所以连reduce都可以免了，我们可以直接使用aggregation框架，这就是第三种方法。&lt;/p&gt;

&lt;h4&gt;3. 使用aggregation框架&lt;/h4&gt;

&lt;p&gt;MongoDB文档中&lt;a href="http://docs.mongodb.org/manual/reference/aggregation/"&gt;aggregation这一节&lt;/a&gt;对这个框架的使用有详细的说明。结合我们的例子，可以这样使用：&lt;/p&gt;

&lt;pre&gt;
&lt;code&gt;:::ruby
def number_statistics field, condition
  self.collection.aggregate([
    {:$match =&amp;gt; condition.merge(field =&amp;gt; {:$ne =&amp;gt; nil})},
    {:$group =&amp;gt; {
      :_id =&amp;gt; "$form_id",
      :min =&amp;gt; {:$min =&amp;gt; "$#{field}"},
      :max =&amp;gt; {:$max =&amp;gt; "$#{field}"},
      :sum =&amp;gt; {:$sum =&amp;gt; "$#{field}"},
      :avg =&amp;gt; {:$avg =&amp;gt; "$#{field}"}
    }},
    {:$project =&amp;gt; {:_id =&amp;gt; 0, :min =&amp;gt; 1, :max =&amp;gt; 1, :sum =&amp;gt; 1, :avg =&amp;gt; 1}}
]).first
end
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;下面对这段代码做以说明，用到了3个操作符：$match，$group和$project。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
    &lt;h5&gt;$match&lt;/h5&gt;
    对需要进行聚合运算的文档进行过滤，MongoDB中接受一个javascript object作为值，如果使用MongoMapper，那么可以是一个hash。
    我们这里需要过滤掉空值，也就是说不希望空值参与聚合计算，所以有 &lt;code&gt;field =&amp;gt; {:$ne =&amp;gt; nil}&lt;/code&gt;。
&lt;/li&gt;
&lt;li&gt;
    &lt;h5&gt;$group&lt;/h5&gt;
    我们需要的运算都在这里了，_id是必须的，表明要根据什么进行group，接下来就是要计算并返回的min、max、sum和avg。
&lt;/li&gt;
&lt;li&gt;
    &lt;h5&gt;$project&lt;/h5&gt;
    这里对返回结果进行了打磨，&lt;code&gt;:_id =&amp;gt; 0&lt;/code&gt; 表明我们在最终结果里去掉了_id，而其他计算值则会返回。
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;需要注意一点的是，$match是pipeline中的第一个操作，这样就可以在做聚合之前先过滤掉我们不需要的文档，提高处理的速度。&lt;/p&gt;

&lt;p&gt;Voilà, 就到这里吧，大过年的，休息，休息，休息一下～&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>MongoDB中计算聚合值的三种方法（二）</title>
    <link rel="alternate" href="/2013/01/03/3-ways-to-calculate-aggregation-in-mongodb-2.html"/>
    <id>/2013/01/03/3-ways-to-calculate-aggregation-in-mongodb-2.html</id>
    <published>2013-01-03T05:36:00Z</published>
    <updated>2013-01-03T05:36:00Z</updated>
    <author>
      <name>Fu Ying</name>
    </author>
    <summary type="html">&lt;p&gt;在&lt;a href="/2012/12/31/3-ways-to-calculate-aggregation-in-mongodb-1.html"&gt;上一篇博文&lt;/a&gt;中，介绍了如何使用Map-Reduce计算聚合值。
但我们的需求并不需要进行任何的映射，我们只要对过滤出来的结果进行计算就可以了。这样，MongoDB中的group方法就可以直接为我所用。&lt;/p&gt;

&lt;h4&gt;2. 使用group&lt;/h4&gt;

&lt;p&gt;逻辑上跟使用Map-Reduce差不多，不过reduce和finalize的参数有一些变化。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;:::ruby
def number_statistics field, condition
  self.collection.group(
      :cond =...&lt;/code&gt;&lt;/pre&gt;</summary>
    <content type="html">&lt;p&gt;在&lt;a href="/2012/12/31/3-ways-to-calculate-aggregation-in-mongodb-1.html"&gt;上一篇博文&lt;/a&gt;中，介绍了如何使用Map-Reduce计算聚合值。
但我们的需求并不需要进行任何的映射，我们只要对过滤出来的结果进行计算就可以了。这样，MongoDB中的group方法就可以直接为我所用。&lt;/p&gt;

&lt;h4&gt;2. 使用group&lt;/h4&gt;

&lt;p&gt;逻辑上跟使用Map-Reduce差不多，不过reduce和finalize的参数有一些变化。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;:::ruby
def number_statistics field, condition
  self.collection.group(
      :cond =&amp;gt; condition,
      :reduce =&amp;gt; number_reduce(field),
      :initial =&amp;gt; {sum: 0, count: 0},
      :finalize =&amp;gt; finalize
  ).find.first
end
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;上面是group方法的参数结构。cond与Map-Reduce中的query参数一样，是查询条件；增加了initial，其值为结果初始对象。我们这里将和值和计数置为0。&lt;/p&gt;

&lt;p&gt;reduce方法的参数则为当前文档(current)和结果对象(result)；而在Map-Reduce中，第一个参数为key，第二个参数为map方法中映射到该key的所有对象。&lt;/p&gt;

&lt;pre&gt;
&lt;code&gt;:::ruby
def number_reduce field
  &amp;lt;&amp;lt;-REDUCE
    function(current, result) {
      var value = current.#{field};
      if (result.min == null || result.min &amp;gt; value) result.min = value;
      if (result.max == null || result.max &amp;lt; value) result.max = value;
      result.sum += value;
      result.count++;
    }
  REDUCE
end
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;finalize方法也有所不同，不需要返回值，传递的参数即为结果对象，我们只需要对其进行修改就可以了：&lt;/p&gt;

&lt;pre&gt;
&lt;code&gt;:::ruby
def finalize
  &amp;lt;&amp;lt;-FINALIZE
    function(result) {
      result.avg = result.sum / result.count;
      delete result.count;
    }
  FINALIZE
end
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;相比较上一种方法，此方法已简单许多，但是对于复杂的聚合逻辑，它也许就不如Map-Reduce能驾驭了。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>MongoDB中计算聚合值的三种方法（一）</title>
    <link rel="alternate" href="/2012/12/31/3-ways-to-calculate-aggregation-in-mongodb-1.html"/>
    <id>/2012/12/31/3-ways-to-calculate-aggregation-in-mongodb-1.html</id>
    <published>2012-12-31T14:25:00Z</published>
    <updated>2012-12-31T14:25:00Z</updated>
    <author>
      <name>Fu Ying</name>
    </author>
    <summary type="html">&lt;p&gt;说到报表，不可避免的会涉及到计算数字域的总计、平均值、最大值和最小值。前一阵在做&lt;a href="http://weibo.com/u/3166713675" target="_blank"&gt;@金数据&lt;/a&gt;的过程中，对使用MongoMapper做聚合做了一点点研究。总的来说，应该是有三种方法：&lt;/p&gt;

&lt;h4&gt;1. 使用Map-Reduce&lt;/h4&gt;

&lt;p&gt;MongoDB的Map-Reduce可谓是功能强大，可以处理复杂的聚合逻辑。关键是map方法和reduce方法的设计。&lt;/p&gt;

&lt;pre&gt;
&lt;code&gt;:::ruby
def map field
  &amp;lt;&amp;lt;-MAP
    function() {
      var number = this.#{field...&lt;/code&gt;&lt;/pre&gt;</summary>
    <content type="html">&lt;p&gt;说到报表，不可避免的会涉及到计算数字域的总计、平均值、最大值和最小值。前一阵在做&lt;a href="http://weibo.com/u/3166713675" target="_blank"&gt;@金数据&lt;/a&gt;的过程中，对使用MongoMapper做聚合做了一点点研究。总的来说，应该是有三种方法：&lt;/p&gt;

&lt;h4&gt;1. 使用Map-Reduce&lt;/h4&gt;

&lt;p&gt;MongoDB的Map-Reduce可谓是功能强大，可以处理复杂的聚合逻辑。关键是map方法和reduce方法的设计。&lt;/p&gt;

&lt;pre&gt;
&lt;code&gt;:::ruby
def map field
  &amp;lt;&amp;lt;-MAP
    function() {
      var number = this.#{field};
      emit(1, {min: number, max: number, sum: number, count: 1});
    }
  MAP
end
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;这里，我们不需要对任何域做group，所以emit的第一个参数就给了1，而第二个参数则构造了一个包含最大值、最小值、和值和计数的对象，这个对象的结构必须跟下面的reduce方法返回的对象结构一致：&lt;/p&gt;

&lt;pre&gt;
&lt;code&gt;:::ruby
def reduce
  &amp;lt;&amp;lt;-REDUCE
    function(key, values) {
      var firstValue = values[0];
      var result = {min: firstValue.min, max: firstValue.max, sum: 0, count: 0};
      values.forEach( function (value) {
        if (value.min &amp;lt; result.min) result.min = value.min;
        if (value.max &amp;gt; result.max) result.max = value.max;
        result.count += value.count;
        result.sum += value.sum;
      });
      return result;
    }
  REDUCE
end
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;最后，我们就可以利用finalize方法根据和值和计数求得平均值：&lt;/p&gt;

&lt;pre&gt;
&lt;code&gt;:::ruby
def finalize
  &amp;lt;&amp;lt;-FINALIZE
    function(key, result) {
      result.avg = result.sum / result.count;
      delete result.count;
      return result;
    }
  FINALIZE
end
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;上面不论是reduce方法还是finalize方法，定义的js function中的第一个参数key，都是与map方法中emit的第一个参数对应的，也就是我们需要按其进行分组的域。
例如我们要对数据的日期进行分组，那么在map方法中，emit的第一个参数就应该为this.date_field。&lt;/p&gt;

&lt;p&gt;如此，就可以调用MongoMapper的API了：&lt;/p&gt;

&lt;pre&gt;
&lt;code&gt;:::ruby
def number_statistics field, condition
  self.collection.map_reduce(
    map(field), reduce,
    :out =&amp;gt; "number_statistics_result",
    :query =&amp;gt; condition,
    :finalize =&amp;gt; finalize
  ).find.first
end
&lt;/code&gt;
&lt;/pre&gt;
</content>
  </entry>
</feed>
